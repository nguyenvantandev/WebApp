package co.jp.myapp.controller;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import co.jp.myapp.dao.ConnectionDao;
import co.jp.myapp.model.SearchVal;

/**
 * Servlet implementation class HomeController
 */
@WebServlet("/HomeController")
public class HomeController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	public HomeController() {
		super();
		// TODO Auto-generated constructor stub
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.setContentType("text/html; charset=UTF-8");
		request.setCharacterEncoding("UTF-8");

		/*
		 * パラメータを取得する
		 */
		String kanji = request.getParameter("kanji");
		String hiragana = request.getParameter("hiragana");
		String imi = request.getParameter("imi");
		String level = request.getParameter("level");

		String actionStatus = request.getParameter("actionStatus");
		String kotobaid = request.getParameter("kotobaid");
		/*
		 * データベースアクセスを呼び出す。
		 */
		ConnectionDao con = new ConnectionDao();
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		/*
		 * 検索ボタン押下処理
		 */
		if ("検索".equals(actionStatus)) {
			ArrayList<SearchVal> list = new ArrayList<SearchVal>();
			ArrayList<String> dk = new ArrayList<String>();
			String sql = "SELECT id, word, hiragana, meaning, sort, ex FROM language_list";
			//検索条件を作成する。
			boolean where = false;
			if (!"".equals(kanji)) {
				where = true;
				sql += " WHERE word = ?";
				dk.add(kanji);
			}

			if (!"".equals(hiragana)) {
				if (where == true) {
					sql += " AND hiragana LIKE ?";
					dk.add("%" + hiragana + "%");
				} else {
					where = true;
					sql += " WHERE hiragana LIKE ?";
					dk.add("%" + hiragana + "%");
				}
			}

			if (!"".equals(imi)) {
				if (where == true) {
					sql += " AND meaning LIKE ?";
					dk.add("%" + imi + "%");
				} else {
					where = true;
					sql += " WHERE meaning LIKE ?";
					dk.add("%" + imi + "%");
				}
			}

			if (!"".equals(level)) {
				if (where == true) {
					sql += " AND level = ?";
					dk.add(level);
				} else {
					where = true;
					sql += " WHERE level = ?";
					dk.add(level);
				}
			}
			sql += " ORDER BY id ASC";
			//画面に表示させる
			try {
				connection = con.connect();
				preparedStatement = connection.prepareStatement(sql);
				for (int i = 0; i < dk.size(); i++) {
					preparedStatement.setString(1 + i, dk.get(i));
				}
				rs = preparedStatement.executeQuery();
				int count = 1;
				while (rs.next()) {
					SearchVal val = new SearchVal();
					val.setId(rs.getString("id"));
					val.setCount(String.valueOf(count));
					val.setKanji(rs.getString("word"));
					val.setHiragana(rs.getString("hiragana"));
					val.setImi(rs.getString("meaning"));
					val.setHinshi(rs.getString("sort"));
					list.add(val);
					count += 1;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			request.setAttribute("kanji", kanji);
			request.setAttribute("hiragana", hiragana);
			request.setAttribute("imi", imi);
			request.setAttribute("level", level);
			request.setAttribute("count", list.size());
			request.setAttribute("valList", list);
			RequestDispatcher rd = request.getRequestDispatcher("Home.jsp");
			rd.forward(request, response);
			return;
		}
		/*
		 * 追加ボタン押下処理
		 */
		if("追加".equals(actionStatus)){
			RequestDispatcher rd = request.getRequestDispatcher("AddUpdate.jsp");
			rd.forward(request, response);
			return;
		}
		/*
		 * 更新リンク押下処理
		 */
		if("更新".equals(actionStatus)){
			String sql = "SELECT id, word, hiragana, meaning, sort, ex, level FROM language_list WHERE id = ?";
			try{
				connection = con.connect();
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(1, Integer.parseInt(kotobaid));
				rs = preparedStatement.executeQuery();
				if(rs.next()){
					request.setAttribute("kotobaid", rs.getString("id"));
					request.setAttribute("kotoba", rs.getString("word"));
					request.setAttribute("hiragana", rs.getString("hiragana"));
					request.setAttribute("imi", rs.getString("meaning"));
					request.setAttribute("hinshi", rs.getString("sort"));
					request.setAttribute("level", "N"+rs.getString("level"));
					request.setAttribute("reibun", rs.getString("ex"));
				}
			}catch(Exception e){
				e.printStackTrace();
			}
			RequestDispatcher rd = request.getRequestDispatcher("AddUpdate.jsp");
			rd.forward(request, response);
			return;
		}

		/*
		 * 削除リンク押下処理
		 */
		if("削除".equals(actionStatus)){
			String sql = "DELETE FROM language_list WHERE id = ?";
			try{
				connection = con.connect();
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(1, Integer.parseInt(kotobaid));
				preparedStatement.executeUpdate();
				connection.commit();
			}catch(Exception e){
				try {
					connection.rollback();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				e.printStackTrace();
			}
			request.setAttribute("kanji", kanji);
			request.setAttribute("hiragana", hiragana);
			request.setAttribute("imi", imi);
			request.setAttribute("level", level);
			request.setAttribute("actionStatus", "検索");
			RequestDispatcher rd = request.getRequestDispatcher("Home.jsp");
			rd.forward(request, response);
			return;
		}
	}

}
